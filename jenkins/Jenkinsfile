node {
    stage('Build') {
        docker.image('python:2-alpine').inside {
            sh 'python -m py_compile sources/add2vals.py sources/calc.py'
            stash(name: 'compiled-results', includes: 'sources/*.py*')
        }
    }
    stage('Test') {
        docker.image('qnib/pytest').inside {
            sh 'py.test --verbose --junit-xml test-reports/results.xml sources/test_calc.py'
        }
        try {
            junit 'test-reports/results.xml'
        }
        catch (err) {
            echo "There was an error with the tests: ${err}"
        }
    }
    stage('Manual Approval') {
        input(message: 'Lanjutkan ke tahap Deploy?')
    }
    stage('Deploy') {
        withEnv(['VOLUME=$(pwd)/sources:/src', 'IMAGE=cdrx/pyinstaller-linux:python2']) {
            dir(env.BUILD_ID) {
                unstash(name: 'compiled-results')
                sh "docker run --rm -v ${VOLUME} ${IMAGE} 'pyinstaller -F add2vals.py'"
                sh "sleep 1m"
            }
            try {
                def localArtifactPath = "${env.BUILD_ID}/sources/dist/add2vals"
                archiveArtifacts localArtifactPath
                sh "docker run --rm -v ${VOLUME} ${IMAGE} 'rm -rf build dist'"

                sshPublisher(publishers: [
                    sshPublisherDesc(
                        configName: 'dicoding-ec2-key',
                        transfers: [
                            sshTransfer(
                                execCommand: 'mkdir -p /home/ubuntu/python',
                                execTimeout: 120000,
                                sourceFiles: localArtifactPath,
                                remoteDirectory: '/home/ubuntu/python'
                            )
                        ]
                    )
                ])
            }
            catch (err) {
                echo "There was an error with the deployment: ${err}"
            }
        }
    }
}

// node {
//     stage('Build') {
//         docker.image('python:2-alpine').inside {
//             sh 'python -m py_compile sources/add2vals.py sources/calc.py'
//         }
//     }
//     stage('Test') {
//         docker.image('qnib/pytest').inside {
//             sh 'py.test --verbose --junit-xml test-reports/results.xml sources/test_calc.py'
//         }
//         try {
//             junit 'test-reports/results.xml'
//         }
//         catch (err) {
//             echo "There was an error with the tests: ${err}"
//         }
//     }
//     stage('Manual Approval') {
//         input(message: 'Lanjutkan ke tahap Deploy?')
//     }
//     stage('Deploy') {
//         def localArtifactPath = "${env.WORKSPACE}/archive/dist/add2vals"
//         withEnv([
//             VOLUME = "${pwd()}/sources:/src",
//             IMAGE = 'cdrx/pyinstaller-linux:python2'
//         ]) {
//             dir(env.BUILD_ID) {
//                 unstash 'compiled-results'
//                 sh "docker run --rm -v ${VOLUME} ${IMAGE} 'pyinstaller -F add2vals.py'"
//             }

//             post {
//                 success {
//                     archiveArtifacts "${env.BUILD_ID}/sources/dist/add2vals"
//                     sh "docker run --rm -v ${VOLUME} ${IMAGE} 'rm -rf build dist'"
//                 }
//             }
//         }
//         // try {
//         //     // ssh ke server tujuan
//         //     def sshHost = '108.137.101.111'
//         //     def sshUser = 'ubuntu'
//         //     def sshKey = credentials('dicoding-ec2-key')

//         //     def ssh = new com.jcraft.jsch.JSch()
//         //     ssh.addIdentity(sshKey)
//         //     def session = ssh.getSession(sshUser, sshHost, 22)
//         //     session.setConfig('StrictHostKeyChecking', 'no')
//         //     session.connect()

//         //     // Transfer artifact to EC2 instance
//         //     def scp = session.getScpClient()
//         //     scp.put(localArtifactPath, '/home/ubuntu')

//         //     // Disconnect SSH session
//         //     session.disconnect()
//         // }
//         // catch (err) {
//         //     echo "There was an error with the deployment: ${err}"
//         // }
//     }
// }