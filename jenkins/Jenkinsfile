node {
    stage('Build') {
        docker.image('python:2-alpine').inside {
            sh 'python -m py_compile sources/add2vals.py sources/calc.py'
            stash(name: 'compiled-results', includes: 'sources/*.py*')
        }
    }
    stage('Test') {
        docker.image('qnib/pytest').inside {
            sh 'py.test --verbose --junit-xml test-reports/results.xml sources/test_calc.py'
        }
        try {
            junit 'test-reports/results.xml'
        }
        catch (err) {
            echo "There was an error with the tests: ${err}"
        }
    }
    stage('Manual Approval') {
        input(message: 'Lanjutkan ke tahap Deploy?')
    }
    stage('Deploy') {
        withEnv(['VOLUME=$(pwd)/sources:/src', 'IMAGE=cdrx/pyinstaller-linux:python2']) {
            dir(env.BUILD_ID) {
                unstash(name: 'compiled-results')
                sh "docker run --rm -v ${VOLUME} ${IMAGE} 'pyinstaller -F add2vals.py'"
                // sh "sleep 1m"
            }
            try {
                def localArtifactPath = "${env.BUILD_ID}/sources/dist/add2vals"
                archiveArtifacts localArtifactPath
                sh "docker run --rm -v ${VOLUME} ${IMAGE} 'rm -rf build dist'"

                withCredentials([sshUserPrivateKey(credentialsId: 'dicoding-ec2-key', keyFileVariable: 'SSH_PRIVATE_KEY')]) {
                    sh """
                        set +x
                        scp -o StrictHostKeyChecking=no -i ${SSH_PRIVATE_KEY} ${localArtifactPath} ubuntu@108.137.101.111:/home/ubuntu/
                    """
                }

            }
            catch (err) {
                echo "There was an error with the deployment: ${err}"
            }
        }
    }
}