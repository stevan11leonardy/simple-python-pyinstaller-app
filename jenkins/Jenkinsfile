node {
    stage('Build') {
        docker.image('python:2-alpine').inside {
            sh 'python -m py_compile sources/add2vals.py sources/calc.py'
        }
    }
    stage('Test') {
        docker.image('qnib/pytest').inside {
            sh 'py.test --verbose --junit-xml test-reports/results.xml sources/test_calc.py'
        }
        try {
            junit 'test-reports/results.xml'
        }
        catch (err) {
            echo "There was an error with the tests: ${err}"
        }
    }
    stage('Manual Approval') {
        input(message: 'Lanjutkan ke tahap Deploy?')
    }
    stage('Deploy') {
        def localArtifactPath = "${env.WORKSPACE}/archive/dist/add2vals"
        
        docker.image('python:3').inside("--entrypoint=''") {
            withEnv(["HOME=${workspace}"]) {
                sh 'pip install --no-cache-dir pyinstaller'
                sh 'pyinstaller --onefile sources/add2vals.py'
            }

            archiveArtifacts artifacts: 'dist/add2vals'

            // jeda 1 menit
            sh 'sleep 1m'
        }
        try {
            // ssh ke server tujuan
            def sshHost = '108.137.101.111'
            def sshUser = 'ubuntu'
            def sshKey = credentials('dicoding-ec2-key')

            def ssh = new com.jcraft.jsch.JSch()
            ssh.addIdentity(sshKey)
            def session = ssh.getSession(sshUser, sshHost, 22)
            session.setConfig('StrictHostKeyChecking', 'no')
            session.connect()

            // Transfer artifact to EC2 instance
            def scp = session.getScpClient()
            scp.put(localArtifactPath, '/home/ubuntu')

            // Disconnect SSH session
            session.disconnect()
        }
        catch (err) {
            echo "There was an error with the deployment: ${err}"
        }
    }
}